* Bot Saves Prince
  Prince Peach is trapped in one of the four corners of a square grid.
  You are in the center of the grid and can move one step at a time in
  any of the four directions. Can you rescue the prince?
** Input format
   The first line contains an odd integer N (< 100) denoting the size of
   the grid. This is followed by an NxN grid. Each cell is denoted by ‘-‘
   (ascii value: 45). The bot position is denoted by ‘m’ and the prince
   position is denoted by ‘p’.

   The top left of the grid is indexed at (0,0) and the bottom right is
   indexed at (N-1,N-1)
** Output format
   Print out all the moves you take to rescue the prince in one go.
   Moves must be separated by ‘\n’ a newline. The valid outputs are LEFT
   or RIGHT or UP or DOWN.
** Sample input
   #+NAME: sample-input
   #+BEGIN_EXAMPLE
   3
   ---
   -m-
   p--
   #+END_EXAMPLE
** Sample output
   #+BEGIN_EXAMPLE
   DOWN
   LEFT
   #+END_EXAMPLE
** Task
   Complete the function displayPathtoPrince which takes in two
   parameters - the integer N and the character array grid. The grid will
   be formatted exactly as you see it in the input, so for the sample
   input the prince is at grid ~[2][0]~. The function shall output moves
   (LEFT, RIGHT, UP or DOWN) on consecutive lines to rescue/reach the
   prince. The goal is to reach the prince in as few moves as
   possible.

   The above sample input is just to help you understand the format. The
   prince (‘p’) can be in any one of the four corners

   Scoring Your score is calculated as follows : (NxN - moves made to
   rescue the prince)/10, where N is the size of the grid (3x3 in the
   sample testcase).
